{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _PageView = require('./PageView');\n\nvar _PageView2 = _interopRequireDefault(_PageView);\n\nvar _BreakView = require('./BreakView');\n\nvar _BreakView2 = _interopRequireDefault(_BreakView);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar PaginationBoxView = function (_Component) {\n  _inherits(PaginationBoxView, _Component);\n\n  function PaginationBoxView(props) {\n    _classCallCheck(this, PaginationBoxView);\n\n    var _this = _possibleConstructorReturn(this, (PaginationBoxView.__proto__ || Object.getPrototypeOf(PaginationBoxView)).call(this, props));\n\n    _this.handlePreviousPage = function (evt) {\n      var selected = _this.state.selected;\n      evt.preventDefault ? evt.preventDefault() : evt.returnValue = false;\n\n      if (selected > 0) {\n        _this.handlePageSelected(selected - 1, evt);\n      }\n    };\n\n    _this.handleNextPage = function (evt) {\n      var selected = _this.state.selected;\n      var pageCount = _this.props.pageCount;\n      evt.preventDefault ? evt.preventDefault() : evt.returnValue = false;\n\n      if (selected < pageCount - 1) {\n        _this.handlePageSelected(selected + 1, evt);\n      }\n    };\n\n    _this.handlePageSelected = function (selected, evt) {\n      evt.preventDefault ? evt.preventDefault() : evt.returnValue = false;\n      if (_this.state.selected === selected) return;\n\n      _this.setState({\n        selected: selected\n      }); // Call the callback with the new selected item:\n\n\n      _this.callCallback(selected);\n    };\n\n    _this.handleBreakClick = function (index, evt) {\n      evt.preventDefault ? evt.preventDefault() : evt.returnValue = false;\n      var selected = _this.state.selected;\n\n      _this.handlePageSelected(selected < index ? _this.getForwardJump() : _this.getBackwardJump(), evt);\n    };\n\n    _this.callCallback = function (selectedItem) {\n      if (typeof _this.props.onPageChange !== 'undefined' && typeof _this.props.onPageChange === 'function') {\n        _this.props.onPageChange({\n          selected: selectedItem\n        });\n      }\n    };\n\n    _this.pagination = function () {\n      var items = [];\n      var _this$props = _this.props,\n          pageRangeDisplayed = _this$props.pageRangeDisplayed,\n          pageCount = _this$props.pageCount,\n          marginPagesDisplayed = _this$props.marginPagesDisplayed,\n          breakLabel = _this$props.breakLabel,\n          breakClassName = _this$props.breakClassName,\n          breakLinkClassName = _this$props.breakLinkClassName;\n      var selected = _this.state.selected;\n\n      if (pageCount <= pageRangeDisplayed) {\n        for (var index = 0; index < pageCount; index++) {\n          items.push(_this.getPageElement(index));\n        }\n      } else {\n        var leftSide = pageRangeDisplayed / 2;\n        var rightSide = pageRangeDisplayed - leftSide; // If the selected page index is on the default right side of the pagination,\n        // we consider that the new right side is made up of it (= only one break element).\n        // If the selected page index is on the default left side of the pagination,\n        // we consider that the new left side is made up of it (= only one break element).\n\n        if (selected > pageCount - pageRangeDisplayed / 2) {\n          rightSide = pageCount - selected;\n          leftSide = pageRangeDisplayed - rightSide;\n        } else if (selected < pageRangeDisplayed / 2) {\n          leftSide = selected;\n          rightSide = pageRangeDisplayed - leftSide;\n        }\n\n        var _index = void 0;\n\n        var page = void 0;\n        var breakView = void 0;\n\n        var createPageView = function createPageView(index) {\n          return _this.getPageElement(index);\n        };\n\n        for (_index = 0; _index < pageCount; _index++) {\n          page = _index + 1; // If the page index is lower than the margin defined,\n          // the page has to be displayed on the left side of\n          // the pagination.\n\n          if (page <= marginPagesDisplayed) {\n            items.push(createPageView(_index));\n            continue;\n          } // If the page index is greater than the page count\n          // minus the margin defined, the page has to be\n          // displayed on the right side of the pagination.\n\n\n          if (page > pageCount - marginPagesDisplayed) {\n            items.push(createPageView(_index));\n            continue;\n          } // If the page index is near the selected page index\n          // and inside the defined range (pageRangeDisplayed)\n          // we have to display it (it will create the center\n          // part of the pagination).\n\n\n          if (_index >= selected - leftSide && _index <= selected + rightSide) {\n            items.push(createPageView(_index));\n            continue;\n          } // If the page index doesn't meet any of the conditions above,\n          // we check if the last item of the current \"items\" array\n          // is a break element. If not, we add a break element, else,\n          // we do nothing (because we don't want to display the page).\n\n\n          if (breakLabel && items[items.length - 1] !== breakView) {\n            breakView = _react2.default.createElement(_BreakView2.default, {\n              key: _index,\n              breakLabel: breakLabel,\n              breakClassName: breakClassName,\n              breakLinkClassName: breakLinkClassName,\n              onClick: _this.handleBreakClick.bind(null, _index)\n            });\n            items.push(breakView);\n          }\n        }\n      }\n\n      return items;\n    };\n\n    var initialSelected = void 0;\n\n    if (props.initialPage) {\n      initialSelected = props.initialPage;\n    } else if (props.forcePage) {\n      initialSelected = props.forcePage;\n    } else {\n      initialSelected = 0;\n    }\n\n    _this.state = {\n      selected: initialSelected\n    };\n    return _this;\n  }\n\n  _createClass(PaginationBoxView, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props = this.props,\n          initialPage = _props.initialPage,\n          disableInitialCallback = _props.disableInitialCallback,\n          extraAriaContext = _props.extraAriaContext; // Call the callback with the initialPage item:\n\n      if (typeof initialPage !== 'undefined' && !disableInitialCallback) {\n        this.callCallback(initialPage);\n      }\n\n      if (extraAriaContext) {\n        console.warn('DEPRECATED (react-paginate): The extraAriaContext prop is deprecated. You should now use the ariaLabelBuilder instead.');\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      if (typeof this.props.forcePage !== 'undefined' && this.props.forcePage !== prevProps.forcePage) {\n        this.setState({\n          selected: this.props.forcePage\n        });\n      }\n    }\n  }, {\n    key: 'getForwardJump',\n    value: function getForwardJump() {\n      var selected = this.state.selected;\n      var _props2 = this.props,\n          pageCount = _props2.pageCount,\n          pageRangeDisplayed = _props2.pageRangeDisplayed;\n      var forwardJump = selected + pageRangeDisplayed;\n      return forwardJump >= pageCount ? pageCount - 1 : forwardJump;\n    }\n  }, {\n    key: 'getBackwardJump',\n    value: function getBackwardJump() {\n      var selected = this.state.selected;\n      var pageRangeDisplayed = this.props.pageRangeDisplayed;\n      var backwardJump = selected - pageRangeDisplayed;\n      return backwardJump < 0 ? 0 : backwardJump;\n    }\n  }, {\n    key: 'hrefBuilder',\n    value: function hrefBuilder(pageIndex) {\n      var _props3 = this.props,\n          hrefBuilder = _props3.hrefBuilder,\n          pageCount = _props3.pageCount;\n\n      if (hrefBuilder && pageIndex !== this.state.selected && pageIndex >= 0 && pageIndex < pageCount) {\n        return hrefBuilder(pageIndex + 1);\n      }\n    }\n  }, {\n    key: 'ariaLabelBuilder',\n    value: function ariaLabelBuilder(pageIndex) {\n      var selected = pageIndex === this.state.selected;\n\n      if (this.props.ariaLabelBuilder && pageIndex >= 0 && pageIndex < this.props.pageCount) {\n        var label = this.props.ariaLabelBuilder(pageIndex + 1, selected); // DEPRECATED: The extraAriaContext prop was used to add additional context\n        // to the aria-label. Users should now use the ariaLabelBuilder instead.\n\n        if (this.props.extraAriaContext && !selected) {\n          label = label + ' ' + this.props.extraAriaContext;\n        }\n\n        return label;\n      }\n    }\n  }, {\n    key: 'getPageElement',\n    value: function getPageElement(index) {\n      var selected = this.state.selected;\n      var _props4 = this.props,\n          pageClassName = _props4.pageClassName,\n          pageLinkClassName = _props4.pageLinkClassName,\n          activeClassName = _props4.activeClassName,\n          activeLinkClassName = _props4.activeLinkClassName,\n          extraAriaContext = _props4.extraAriaContext;\n      return _react2.default.createElement(_PageView2.default, {\n        key: index,\n        onClick: this.handlePageSelected.bind(null, index),\n        selected: selected === index,\n        pageClassName: pageClassName,\n        pageLinkClassName: pageLinkClassName,\n        activeClassName: activeClassName,\n        activeLinkClassName: activeLinkClassName,\n        extraAriaContext: extraAriaContext,\n        href: this.hrefBuilder(index),\n        ariaLabel: this.ariaLabelBuilder(index),\n        page: index + 1\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props5 = this.props,\n          disabledClassName = _props5.disabledClassName,\n          previousClassName = _props5.previousClassName,\n          nextClassName = _props5.nextClassName,\n          pageCount = _props5.pageCount,\n          containerClassName = _props5.containerClassName,\n          previousLinkClassName = _props5.previousLinkClassName,\n          previousLabel = _props5.previousLabel,\n          nextLinkClassName = _props5.nextLinkClassName,\n          nextLabel = _props5.nextLabel;\n      var selected = this.state.selected;\n      var previousClasses = previousClassName + (selected === 0 ? ' ' + disabledClassName : '');\n      var nextClasses = nextClassName + (selected === pageCount - 1 ? ' ' + disabledClassName : '');\n      var previousAriaDisabled = selected === 0 ? 'true' : 'false';\n      var nextAriaDisabled = selected === pageCount - 1 ? 'true' : 'false';\n      return _react2.default.createElement('ul', {\n        className: containerClassName\n      }, _react2.default.createElement('li', {\n        className: previousClasses\n      }, _react2.default.createElement('a', {\n        onClick: this.handlePreviousPage,\n        className: previousLinkClassName,\n        href: this.hrefBuilder(selected - 1),\n        tabIndex: '0',\n        role: 'button',\n        onKeyPress: this.handlePreviousPage,\n        'aria-disabled': previousAriaDisabled\n      }, previousLabel)), this.pagination(), _react2.default.createElement('li', {\n        className: nextClasses\n      }, _react2.default.createElement('a', {\n        onClick: this.handleNextPage,\n        className: nextLinkClassName,\n        href: this.hrefBuilder(selected + 1),\n        tabIndex: '0',\n        role: 'button',\n        onKeyPress: this.handleNextPage,\n        'aria-disabled': nextAriaDisabled\n      }, nextLabel)));\n    }\n  }]);\n\n  return PaginationBoxView;\n}(_react.Component);\n\nPaginationBoxView.propTypes = {\n  pageCount: _propTypes2.default.number.isRequired,\n  pageRangeDisplayed: _propTypes2.default.number.isRequired,\n  marginPagesDisplayed: _propTypes2.default.number.isRequired,\n  previousLabel: _propTypes2.default.node,\n  nextLabel: _propTypes2.default.node,\n  breakLabel: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),\n  hrefBuilder: _propTypes2.default.func,\n  onPageChange: _propTypes2.default.func,\n  initialPage: _propTypes2.default.number,\n  forcePage: _propTypes2.default.number,\n  disableInitialCallback: _propTypes2.default.bool,\n  containerClassName: _propTypes2.default.string,\n  pageClassName: _propTypes2.default.string,\n  pageLinkClassName: _propTypes2.default.string,\n  activeClassName: _propTypes2.default.string,\n  activeLinkClassName: _propTypes2.default.string,\n  previousClassName: _propTypes2.default.string,\n  nextClassName: _propTypes2.default.string,\n  previousLinkClassName: _propTypes2.default.string,\n  nextLinkClassName: _propTypes2.default.string,\n  disabledClassName: _propTypes2.default.string,\n  breakClassName: _propTypes2.default.string,\n  breakLinkClassName: _propTypes2.default.string,\n  extraAriaContext: _propTypes2.default.string,\n  ariaLabelBuilder: _propTypes2.default.func\n};\nPaginationBoxView.defaultProps = {\n  pageCount: 10,\n  pageRangeDisplayed: 2,\n  marginPagesDisplayed: 3,\n  activeClassName: 'selected',\n  previousClassName: 'previous',\n  nextClassName: 'next',\n  previousLabel: 'Previous',\n  nextLabel: 'Next',\n  breakLabel: '...',\n  disabledClassName: 'disabled',\n  disableInitialCallback: false\n};\nexports.default = PaginationBoxView;","map":{"version":3,"sources":["../react_components/PaginationBoxView.js"],"names":["PaginationBoxView","Component","propTypes","pageCount","PropTypes","pageRangeDisplayed","marginPagesDisplayed","previousLabel","nextLabel","breakLabel","hrefBuilder","onPageChange","initialPage","forcePage","disableInitialCallback","containerClassName","pageClassName","pageLinkClassName","activeClassName","activeLinkClassName","previousClassName","nextClassName","previousLinkClassName","nextLinkClassName","disabledClassName","breakClassName","breakLinkClassName","extraAriaContext","ariaLabelBuilder","func","defaultProps","initialSelected","props","selected","console","prevProps","evt","forwardJump","backwardJump","pageIndex","label","index","items","leftSide","rightSide","page","breakView","createPageView","previousClasses","nextClasses","previousAriaDisabled","nextAriaDisabled"],"mappings":"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","sourcesContent":["'use strict';\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PageView from './PageView';\nimport BreakView from './BreakView';\n\nexport default class PaginationBoxView extends Component {\n  static propTypes = {\n    pageCount: PropTypes.number.isRequired,\n    pageRangeDisplayed: PropTypes.number.isRequired,\n    marginPagesDisplayed: PropTypes.number.isRequired,\n    previousLabel: PropTypes.node,\n    nextLabel: PropTypes.node,\n    breakLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    hrefBuilder: PropTypes.func,\n    onPageChange: PropTypes.func,\n    initialPage: PropTypes.number,\n    forcePage: PropTypes.number,\n    disableInitialCallback: PropTypes.bool,\n    containerClassName: PropTypes.string,\n    pageClassName: PropTypes.string,\n    pageLinkClassName: PropTypes.string,\n    activeClassName: PropTypes.string,\n    activeLinkClassName: PropTypes.string,\n    previousClassName: PropTypes.string,\n    nextClassName: PropTypes.string,\n    previousLinkClassName: PropTypes.string,\n    nextLinkClassName: PropTypes.string,\n    disabledClassName: PropTypes.string,\n    breakClassName: PropTypes.string,\n    breakLinkClassName: PropTypes.string,\n    extraAriaContext: PropTypes.string,\n    ariaLabelBuilder: PropTypes.func,\n  };\n\n  static defaultProps = {\n    pageCount: 10,\n    pageRangeDisplayed: 2,\n    marginPagesDisplayed: 3,\n    activeClassName: 'selected',\n    previousClassName: 'previous',\n    nextClassName: 'next',\n    previousLabel: 'Previous',\n    nextLabel: 'Next',\n    breakLabel: '...',\n    disabledClassName: 'disabled',\n    disableInitialCallback: false,\n  };\n\n  constructor(props) {\n    super(props);\n\n    let initialSelected;\n    if (props.initialPage) {\n      initialSelected = props.initialPage;\n    } else if (props.forcePage) {\n      initialSelected = props.forcePage;\n    } else {\n      initialSelected = 0;\n    }\n\n    this.state = {\n      selected: initialSelected,\n    };\n  }\n\n  componentDidMount() {\n    const {\n      initialPage,\n      disableInitialCallback,\n      extraAriaContext,\n    } = this.props;\n    // Call the callback with the initialPage item:\n    if (typeof initialPage !== 'undefined' && !disableInitialCallback) {\n      this.callCallback(initialPage);\n    }\n\n    if (extraAriaContext) {\n      console.warn(\n        'DEPRECATED (react-paginate): The extraAriaContext prop is deprecated. You should now use the ariaLabelBuilder instead.'\n      );\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      typeof this.props.forcePage !== 'undefined' &&\n      this.props.forcePage !== prevProps.forcePage\n    ) {\n      this.setState({ selected: this.props.forcePage });\n    }\n  }\n\n  handlePreviousPage = evt => {\n    const { selected } = this.state;\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\n    if (selected > 0) {\n      this.handlePageSelected(selected - 1, evt);\n    }\n  };\n\n  handleNextPage = evt => {\n    const { selected } = this.state;\n    const { pageCount } = this.props;\n\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\n    if (selected < pageCount - 1) {\n      this.handlePageSelected(selected + 1, evt);\n    }\n  };\n\n  handlePageSelected = (selected, evt) => {\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\n\n    if (this.state.selected === selected) return;\n\n    this.setState({ selected: selected });\n\n    // Call the callback with the new selected item:\n    this.callCallback(selected);\n  };\n\n  getForwardJump() {\n    const { selected } = this.state;\n    const { pageCount, pageRangeDisplayed } = this.props;\n\n    const forwardJump = selected + pageRangeDisplayed;\n    return forwardJump >= pageCount ? pageCount - 1 : forwardJump;\n  }\n\n  getBackwardJump() {\n    const { selected } = this.state;\n    const { pageRangeDisplayed } = this.props;\n\n    const backwardJump = selected - pageRangeDisplayed;\n    return backwardJump < 0 ? 0 : backwardJump;\n  }\n\n  handleBreakClick = (index, evt) => {\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\n\n    const { selected } = this.state;\n\n    this.handlePageSelected(\n      selected < index ? this.getForwardJump() : this.getBackwardJump(),\n      evt\n    );\n  };\n\n  hrefBuilder(pageIndex) {\n    const { hrefBuilder, pageCount } = this.props;\n    if (\n      hrefBuilder &&\n      pageIndex !== this.state.selected &&\n      pageIndex >= 0 &&\n      pageIndex < pageCount\n    ) {\n      return hrefBuilder(pageIndex + 1);\n    }\n  }\n\n  ariaLabelBuilder(pageIndex) {\n    const selected = pageIndex === this.state.selected;\n    if (\n      this.props.ariaLabelBuilder &&\n      pageIndex >= 0 &&\n      pageIndex < this.props.pageCount\n    ) {\n      let label = this.props.ariaLabelBuilder(pageIndex + 1, selected);\n      // DEPRECATED: The extraAriaContext prop was used to add additional context\n      // to the aria-label. Users should now use the ariaLabelBuilder instead.\n      if (this.props.extraAriaContext && !selected) {\n        label = label + ' ' + this.props.extraAriaContext;\n      }\n      return label;\n    }\n  }\n\n  callCallback = selectedItem => {\n    if (\n      typeof this.props.onPageChange !== 'undefined' &&\n      typeof this.props.onPageChange === 'function'\n    ) {\n      this.props.onPageChange({ selected: selectedItem });\n    }\n  };\n\n  getPageElement(index) {\n    const { selected } = this.state;\n    const {\n      pageClassName,\n      pageLinkClassName,\n      activeClassName,\n      activeLinkClassName,\n      extraAriaContext,\n    } = this.props;\n\n    return (\n      <PageView\n        key={index}\n        onClick={this.handlePageSelected.bind(null, index)}\n        selected={selected === index}\n        pageClassName={pageClassName}\n        pageLinkClassName={pageLinkClassName}\n        activeClassName={activeClassName}\n        activeLinkClassName={activeLinkClassName}\n        extraAriaContext={extraAriaContext}\n        href={this.hrefBuilder(index)}\n        ariaLabel={this.ariaLabelBuilder(index)}\n        page={index + 1}\n      />\n    );\n  }\n\n  pagination = () => {\n    const items = [];\n    const {\n      pageRangeDisplayed,\n      pageCount,\n      marginPagesDisplayed,\n      breakLabel,\n      breakClassName,\n      breakLinkClassName,\n    } = this.props;\n\n    const { selected } = this.state;\n\n    if (pageCount <= pageRangeDisplayed) {\n      for (let index = 0; index < pageCount; index++) {\n        items.push(this.getPageElement(index));\n      }\n    } else {\n      let leftSide = pageRangeDisplayed / 2;\n      let rightSide = pageRangeDisplayed - leftSide;\n\n      // If the selected page index is on the default right side of the pagination,\n      // we consider that the new right side is made up of it (= only one break element).\n      // If the selected page index is on the default left side of the pagination,\n      // we consider that the new left side is made up of it (= only one break element).\n      if (selected > pageCount - pageRangeDisplayed / 2) {\n        rightSide = pageCount - selected;\n        leftSide = pageRangeDisplayed - rightSide;\n      } else if (selected < pageRangeDisplayed / 2) {\n        leftSide = selected;\n        rightSide = pageRangeDisplayed - leftSide;\n      }\n\n      let index;\n      let page;\n      let breakView;\n      let createPageView = index => this.getPageElement(index);\n\n      for (index = 0; index < pageCount; index++) {\n        page = index + 1;\n\n        // If the page index is lower than the margin defined,\n        // the page has to be displayed on the left side of\n        // the pagination.\n        if (page <= marginPagesDisplayed) {\n          items.push(createPageView(index));\n          continue;\n        }\n\n        // If the page index is greater than the page count\n        // minus the margin defined, the page has to be\n        // displayed on the right side of the pagination.\n        if (page > pageCount - marginPagesDisplayed) {\n          items.push(createPageView(index));\n          continue;\n        }\n\n        // If the page index is near the selected page index\n        // and inside the defined range (pageRangeDisplayed)\n        // we have to display it (it will create the center\n        // part of the pagination).\n        if (index >= selected - leftSide && index <= selected + rightSide) {\n          items.push(createPageView(index));\n          continue;\n        }\n\n        // If the page index doesn't meet any of the conditions above,\n        // we check if the last item of the current \"items\" array\n        // is a break element. If not, we add a break element, else,\n        // we do nothing (because we don't want to display the page).\n        if (breakLabel && items[items.length - 1] !== breakView) {\n          breakView = (\n            <BreakView\n              key={index}\n              breakLabel={breakLabel}\n              breakClassName={breakClassName}\n              breakLinkClassName={breakLinkClassName}\n              onClick={this.handleBreakClick.bind(null, index)}\n            />\n          );\n          items.push(breakView);\n        }\n      }\n    }\n\n    return items;\n  };\n\n  render() {\n    const {\n      disabledClassName,\n      previousClassName,\n      nextClassName,\n      pageCount,\n      containerClassName,\n      previousLinkClassName,\n      previousLabel,\n      nextLinkClassName,\n      nextLabel,\n    } = this.props;\n\n    const { selected } = this.state;\n\n    const previousClasses =\n      previousClassName + (selected === 0 ? ` ${disabledClassName}` : '');\n    const nextClasses =\n      nextClassName +\n      (selected === pageCount - 1 ? ` ${disabledClassName}` : '');\n\n    const previousAriaDisabled = selected === 0 ? 'true' : 'false';\n    const nextAriaDisabled = selected === pageCount - 1 ? 'true' : 'false';\n\n    return (\n      <ul className={containerClassName}>\n        <li className={previousClasses}>\n          <a\n            onClick={this.handlePreviousPage}\n            className={previousLinkClassName}\n            href={this.hrefBuilder(selected - 1)}\n            tabIndex=\"0\"\n            role=\"button\"\n            onKeyPress={this.handlePreviousPage}\n            aria-disabled={previousAriaDisabled}\n          >\n            {previousLabel}\n          </a>\n        </li>\n\n        {this.pagination()}\n\n        <li className={nextClasses}>\n          <a\n            onClick={this.handleNextPage}\n            className={nextLinkClassName}\n            href={this.hrefBuilder(selected + 1)}\n            tabIndex=\"0\"\n            role=\"button\"\n            onKeyPress={this.handleNextPage}\n            aria-disabled={nextAriaDisabled}\n          >\n            {nextLabel}\n          </a>\n        </li>\n      </ul>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}