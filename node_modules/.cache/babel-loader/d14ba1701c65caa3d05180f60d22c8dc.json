{"ast":null,"code":"/**\n * Copyright (c) 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getVendorPrefixedName\n * @typechecks\n */\n'use strict';\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar camelize = require('./camelize');\n\nvar invariant = require('./invariant');\n\nvar memoized = {};\nvar prefixes = ['Webkit', 'ms', 'Moz', 'O'];\nvar prefixRegex = new RegExp('^(' + prefixes.join('|') + ')');\nvar testStyle = ExecutionEnvironment.canUseDOM ? document.createElement('div').style : {};\n\nfunction getWithPrefix(name) {\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefixedName = prefixes[i] + name;\n\n    if (prefixedName in testStyle) {\n      return prefixedName;\n    }\n  }\n\n  return null;\n}\n/**\n * @param {string} property Name of a css property to check for.\n * @return {?string} property name supported in the browser, or null if not\n * supported.\n */\n\n\nfunction getVendorPrefixedName(property) {\n  var name = camelize(property);\n\n  if (memoized[name] === undefined) {\n    var capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n\n    if (prefixRegex.test(capitalizedName)) {\n      invariant(false, 'getVendorPrefixedName must only be called with unprefixed' + 'CSS property names. It was called with %s', property);\n    }\n\n    memoized[name] = name in testStyle ? name : getWithPrefix(capitalizedName);\n  }\n\n  return memoized[name];\n}\n\nmodule.exports = getVendorPrefixedName;","map":{"version":3,"sources":["C:/Versa/pagination/node_modules/fixed-data-table/internal/getVendorPrefixedName.js"],"names":["ExecutionEnvironment","require","camelize","invariant","memoized","prefixes","prefixRegex","RegExp","join","testStyle","canUseDOM","document","createElement","style","getWithPrefix","name","i","length","prefixedName","getVendorPrefixedName","property","undefined","capitalizedName","charAt","toUpperCase","slice","test","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAYA;;AAEA,IAAIA,oBAAoB,GAAGC,OAAO,CAAC,wBAAD,CAAlC;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIG,QAAQ,GAAG,EAAf;AACA,IAAIC,QAAQ,GAAG,CAAC,QAAD,EAAW,IAAX,EAAiB,KAAjB,EAAwB,GAAxB,CAAf;AACA,IAAIC,WAAW,GAAG,IAAIC,MAAJ,CAAW,OAAOF,QAAQ,CAACG,IAAT,CAAc,GAAd,CAAP,GAA4B,GAAvC,CAAlB;AACA,IAAIC,SAAS,GAAGT,oBAAoB,CAACU,SAArB,GAAiCC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,EAA8BC,KAA/D,GAAuE,EAAvF;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,QAAQ,CAACY,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,QAAIE,YAAY,GAAGb,QAAQ,CAACW,CAAD,CAAR,GAAcD,IAAjC;;AACA,QAAIG,YAAY,IAAIT,SAApB,EAA+B;AAC7B,aAAOS,YAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD;AAED;;;;;;;AAKA,SAASC,qBAAT,CAA+BC,QAA/B,EAAyC;AACvC,MAAIL,IAAI,GAAGb,QAAQ,CAACkB,QAAD,CAAnB;;AACA,MAAIhB,QAAQ,CAACW,IAAD,CAAR,KAAmBM,SAAvB,EAAkC;AAChC,QAAIC,eAAe,GAAGP,IAAI,CAACQ,MAAL,CAAY,CAAZ,EAAeC,WAAf,KAA+BT,IAAI,CAACU,KAAL,CAAW,CAAX,CAArD;;AACA,QAAInB,WAAW,CAACoB,IAAZ,CAAiBJ,eAAjB,CAAJ,EAAuC;AACrCnB,MAAAA,SAAS,CAAC,KAAD,EAAQ,8DAA8D,2CAAtE,EAAmHiB,QAAnH,CAAT;AACD;;AACDhB,IAAAA,QAAQ,CAACW,IAAD,CAAR,GAAiBA,IAAI,IAAIN,SAAR,GAAoBM,IAApB,GAA2BD,aAAa,CAACQ,eAAD,CAAzD;AACD;;AACD,SAAOlB,QAAQ,CAACW,IAAD,CAAf;AACD;;AAEDY,MAAM,CAACC,OAAP,GAAiBT,qBAAjB","sourcesContent":["/**\n * Copyright (c) 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getVendorPrefixedName\n * @typechecks\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar camelize = require('./camelize');\nvar invariant = require('./invariant');\n\nvar memoized = {};\nvar prefixes = ['Webkit', 'ms', 'Moz', 'O'];\nvar prefixRegex = new RegExp('^(' + prefixes.join('|') + ')');\nvar testStyle = ExecutionEnvironment.canUseDOM ? document.createElement('div').style : {};\n\nfunction getWithPrefix(name) {\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefixedName = prefixes[i] + name;\n    if (prefixedName in testStyle) {\n      return prefixedName;\n    }\n  }\n  return null;\n}\n\n/**\n * @param {string} property Name of a css property to check for.\n * @return {?string} property name supported in the browser, or null if not\n * supported.\n */\nfunction getVendorPrefixedName(property) {\n  var name = camelize(property);\n  if (memoized[name] === undefined) {\n    var capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n    if (prefixRegex.test(capitalizedName)) {\n      invariant(false, 'getVendorPrefixedName must only be called with unprefixed' + 'CSS property names. It was called with %s', property);\n    }\n    memoized[name] = name in testStyle ? name : getWithPrefix(capitalizedName);\n  }\n  return memoized[name];\n}\n\nmodule.exports = getVendorPrefixedName;"]},"metadata":{},"sourceType":"script"}