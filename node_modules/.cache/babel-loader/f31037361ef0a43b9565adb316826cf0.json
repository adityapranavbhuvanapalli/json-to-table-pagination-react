{"ast":null,"code":"/**\n * Copyright (c) 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule FixedDataTableWidthHelper\n * @typechecks\n */\n'use strict';\n\nvar React = require('./React');\n\nfunction getTotalWidth(\n/*array*/\ncolumns)\n/*number*/\n{\n  var totalWidth = 0;\n\n  for (var i = 0; i < columns.length; ++i) {\n    totalWidth += columns[i].props.width;\n  }\n\n  return totalWidth;\n}\n\nfunction getTotalFlexGrow(\n/*array*/\ncolumns)\n/*number*/\n{\n  var totalFlexGrow = 0;\n\n  for (var i = 0; i < columns.length; ++i) {\n    totalFlexGrow += columns[i].props.flexGrow || 0;\n  }\n\n  return totalFlexGrow;\n}\n\nfunction distributeFlexWidth(\n/*array*/\ncolumns,\n/*number*/\nflexWidth)\n/*object*/\n{\n  if (flexWidth <= 0) {\n    return {\n      columns: columns,\n      width: getTotalWidth(columns)\n    };\n  }\n\n  var remainingFlexGrow = getTotalFlexGrow(columns);\n  var remainingFlexWidth = flexWidth;\n  var newColumns = [];\n  var totalWidth = 0;\n\n  for (var i = 0; i < columns.length; ++i) {\n    var column = columns[i];\n\n    if (!column.props.flexGrow) {\n      totalWidth += column.props.width;\n      newColumns.push(column);\n      continue;\n    }\n\n    var columnFlexWidth = Math.floor(column.props.flexGrow / remainingFlexGrow * remainingFlexWidth);\n    var newColumnWidth = Math.floor(column.props.width + columnFlexWidth);\n    totalWidth += newColumnWidth;\n    remainingFlexGrow -= column.props.flexGrow;\n    remainingFlexWidth -= columnFlexWidth;\n    newColumns.push(React.cloneElement(column, {\n      width: newColumnWidth\n    }));\n  }\n\n  return {\n    columns: newColumns,\n    width: totalWidth\n  };\n}\n\nfunction adjustColumnGroupWidths(\n/*array*/\ncolumnGroups,\n/*number*/\nexpectedWidth)\n/*object*/\n{\n  var allColumns = [];\n  var i;\n\n  for (i = 0; i < columnGroups.length; ++i) {\n    React.Children.forEach(columnGroups[i].props.children, function (column) {\n      allColumns.push(column);\n    });\n  }\n\n  var columnsWidth = getTotalWidth(allColumns);\n  var remainingFlexGrow = getTotalFlexGrow(allColumns);\n  var remainingFlexWidth = Math.max(expectedWidth - columnsWidth, 0);\n  var newAllColumns = [];\n  var newColumnGroups = [];\n\n  for (i = 0; i < columnGroups.length; ++i) {\n    var columnGroup = columnGroups[i];\n    var currentColumns = [];\n    React.Children.forEach(columnGroup.props.children, function (column) {\n      currentColumns.push(column);\n    });\n    var columnGroupFlexGrow = getTotalFlexGrow(currentColumns);\n    var columnGroupFlexWidth = Math.floor(columnGroupFlexGrow / remainingFlexGrow * remainingFlexWidth);\n    var newColumnSettings = distributeFlexWidth(currentColumns, columnGroupFlexWidth);\n    remainingFlexGrow -= columnGroupFlexGrow;\n    remainingFlexWidth -= columnGroupFlexWidth;\n\n    for (var j = 0; j < newColumnSettings.columns.length; ++j) {\n      newAllColumns.push(newColumnSettings.columns[j]);\n    }\n\n    newColumnGroups.push(React.cloneElement(columnGroup, {\n      width: newColumnSettings.width\n    }));\n  }\n\n  return {\n    columns: newAllColumns,\n    columnGroups: newColumnGroups\n  };\n}\n\nfunction adjustColumnWidths(\n/*array*/\ncolumns,\n/*number*/\nexpectedWidth)\n/*array*/\n{\n  var columnsWidth = getTotalWidth(columns);\n\n  if (columnsWidth < expectedWidth) {\n    return distributeFlexWidth(columns, expectedWidth - columnsWidth).columns;\n  }\n\n  return columns;\n}\n\nvar FixedDataTableWidthHelper = {\n  getTotalWidth: getTotalWidth,\n  getTotalFlexGrow: getTotalFlexGrow,\n  distributeFlexWidth: distributeFlexWidth,\n  adjustColumnWidths: adjustColumnWidths,\n  adjustColumnGroupWidths: adjustColumnGroupWidths\n};\nmodule.exports = FixedDataTableWidthHelper;","map":{"version":3,"sources":["C:/Versa/pagination/node_modules/fixed-data-table/internal/FixedDataTableWidthHelper.js"],"names":["React","require","getTotalWidth","columns","totalWidth","i","length","props","width","getTotalFlexGrow","totalFlexGrow","flexGrow","distributeFlexWidth","flexWidth","remainingFlexGrow","remainingFlexWidth","newColumns","column","push","columnFlexWidth","Math","floor","newColumnWidth","cloneElement","adjustColumnGroupWidths","columnGroups","expectedWidth","allColumns","Children","forEach","children","columnsWidth","max","newAllColumns","newColumnGroups","columnGroup","currentColumns","columnGroupFlexGrow","columnGroupFlexWidth","newColumnSettings","j","adjustColumnWidths","FixedDataTableWidthHelper","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule FixedDataTableWidthHelper\n * @typechecks\n */\n\n'use strict';\n\nvar React = require('./React');\n\nfunction getTotalWidth( /*array*/columns) /*number*/{\n  var totalWidth = 0;\n  for (var i = 0; i < columns.length; ++i) {\n    totalWidth += columns[i].props.width;\n  }\n  return totalWidth;\n}\n\nfunction getTotalFlexGrow( /*array*/columns) /*number*/{\n  var totalFlexGrow = 0;\n  for (var i = 0; i < columns.length; ++i) {\n    totalFlexGrow += columns[i].props.flexGrow || 0;\n  }\n  return totalFlexGrow;\n}\n\nfunction distributeFlexWidth(\n/*array*/columns,\n/*number*/flexWidth) /*object*/{\n  if (flexWidth <= 0) {\n    return {\n      columns: columns,\n      width: getTotalWidth(columns)\n    };\n  }\n  var remainingFlexGrow = getTotalFlexGrow(columns);\n  var remainingFlexWidth = flexWidth;\n  var newColumns = [];\n  var totalWidth = 0;\n  for (var i = 0; i < columns.length; ++i) {\n    var column = columns[i];\n    if (!column.props.flexGrow) {\n      totalWidth += column.props.width;\n      newColumns.push(column);\n      continue;\n    }\n    var columnFlexWidth = Math.floor(column.props.flexGrow / remainingFlexGrow * remainingFlexWidth);\n    var newColumnWidth = Math.floor(column.props.width + columnFlexWidth);\n    totalWidth += newColumnWidth;\n\n    remainingFlexGrow -= column.props.flexGrow;\n    remainingFlexWidth -= columnFlexWidth;\n\n    newColumns.push(React.cloneElement(column, { width: newColumnWidth }));\n  }\n\n  return {\n    columns: newColumns,\n    width: totalWidth\n  };\n}\n\nfunction adjustColumnGroupWidths(\n/*array*/columnGroups,\n/*number*/expectedWidth) /*object*/{\n  var allColumns = [];\n  var i;\n  for (i = 0; i < columnGroups.length; ++i) {\n    React.Children.forEach(columnGroups[i].props.children, function (column) {\n      allColumns.push(column);\n    });\n  }\n  var columnsWidth = getTotalWidth(allColumns);\n  var remainingFlexGrow = getTotalFlexGrow(allColumns);\n  var remainingFlexWidth = Math.max(expectedWidth - columnsWidth, 0);\n\n  var newAllColumns = [];\n  var newColumnGroups = [];\n\n  for (i = 0; i < columnGroups.length; ++i) {\n    var columnGroup = columnGroups[i];\n    var currentColumns = [];\n\n    React.Children.forEach(columnGroup.props.children, function (column) {\n      currentColumns.push(column);\n    });\n\n    var columnGroupFlexGrow = getTotalFlexGrow(currentColumns);\n    var columnGroupFlexWidth = Math.floor(columnGroupFlexGrow / remainingFlexGrow * remainingFlexWidth);\n\n    var newColumnSettings = distributeFlexWidth(currentColumns, columnGroupFlexWidth);\n\n    remainingFlexGrow -= columnGroupFlexGrow;\n    remainingFlexWidth -= columnGroupFlexWidth;\n\n    for (var j = 0; j < newColumnSettings.columns.length; ++j) {\n      newAllColumns.push(newColumnSettings.columns[j]);\n    }\n\n    newColumnGroups.push(React.cloneElement(columnGroup, { width: newColumnSettings.width }));\n  }\n\n  return {\n    columns: newAllColumns,\n    columnGroups: newColumnGroups\n  };\n}\n\nfunction adjustColumnWidths(\n/*array*/columns,\n/*number*/expectedWidth) /*array*/{\n  var columnsWidth = getTotalWidth(columns);\n  if (columnsWidth < expectedWidth) {\n    return distributeFlexWidth(columns, expectedWidth - columnsWidth).columns;\n  }\n  return columns;\n}\n\nvar FixedDataTableWidthHelper = {\n  getTotalWidth: getTotalWidth,\n  getTotalFlexGrow: getTotalFlexGrow,\n  distributeFlexWidth: distributeFlexWidth,\n  adjustColumnWidths: adjustColumnWidths,\n  adjustColumnGroupWidths: adjustColumnGroupWidths\n};\n\nmodule.exports = FixedDataTableWidthHelper;"]},"metadata":{},"sourceType":"script"}