{"ast":null,"code":"/**\n * Copyright (c) 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponentWithPureRenderMixin\n */\n'use strict';\n/**\n * Performs equality by iterating through keys on an object and returning\n * false when any key has values which are not strictly equal between\n * objA and objB. Returns true when the values of all keys are strictly equal.\n *\n * @return {boolean}\n */\n\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n\n  var key; // Test for A's keys different from B.\n\n  for (key in objA) {\n    if (objA.hasOwnProperty(key) && (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {\n      return false;\n    }\n  } // Test for B's keys missing from A.\n\n\n  for (key in objB) {\n    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * If your React component's render function is \"pure\", e.g. it will render the\n * same result given the same props and state, provide this Mixin for a\n * considerable performance boost.\n *\n * Most React components have pure render functions.\n *\n * Example:\n *\n *   var ReactComponentWithPureRenderMixin =\n *     require('ReactComponentWithPureRenderMixin');\n *   React.createClass({\n *     mixins: [ReactComponentWithPureRenderMixin],\n *\n *     render: function() {\n *       return <div className={this.props.className}>foo</div>;\n *     }\n *   });\n *\n * Note: This only checks shallow equality for props and state. If these contain\n * complex data structures this mixin may have false-negatives for deeper\n * differences. Only mixin to components which have simple props and state, or\n * use `forceUpdate()` when you know deep data structures have changed.\n */\n\n\nvar ReactComponentWithPureRenderMixin = {\n  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {\n    return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState);\n  }\n};\nmodule.exports = ReactComponentWithPureRenderMixin;","map":{"version":3,"sources":["C:/Versa/pagination/node_modules/fixed-data-table/internal/ReactComponentWithPureRenderMixin.js"],"names":["shallowEqual","objA","objB","key","hasOwnProperty","ReactComponentWithPureRenderMixin","shouldComponentUpdate","nextProps","nextState","props","state","module","exports"],"mappings":"AAAA;;;;;;;;;;AAWA;AAEA;;;;;;;;AAOA,SAASA,YAAT,CAAsBC,IAAtB,EAA4BC,IAA5B,EAAkC;AAChC,MAAID,IAAI,KAAKC,IAAb,EAAmB;AACjB,WAAO,IAAP;AACD;;AACD,MAAIC,GAAJ,CAJgC,CAKhC;;AACA,OAAKA,GAAL,IAAYF,IAAZ,EAAkB;AAChB,QAAIA,IAAI,CAACG,cAAL,CAAoBD,GAApB,MAA6B,CAACD,IAAI,CAACE,cAAL,CAAoBD,GAApB,CAAD,IAA6BF,IAAI,CAACE,GAAD,CAAJ,KAAcD,IAAI,CAACC,GAAD,CAA5E,CAAJ,EAAwF;AACtF,aAAO,KAAP;AACD;AACF,GAV+B,CAWhC;;;AACA,OAAKA,GAAL,IAAYD,IAAZ,EAAkB;AAChB,QAAIA,IAAI,CAACE,cAAL,CAAoBD,GAApB,KAA4B,CAACF,IAAI,CAACG,cAAL,CAAoBD,GAApB,CAAjC,EAA2D;AACzD,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,IAAIE,iCAAiC,GAAG;AACtCC,EAAAA,qBAAqB,EAAE,SAASA,qBAAT,CAA+BC,SAA/B,EAA0CC,SAA1C,EAAqD;AAC1E,WAAO,CAACR,YAAY,CAAC,KAAKS,KAAN,EAAaF,SAAb,CAAb,IAAwC,CAACP,YAAY,CAAC,KAAKU,KAAN,EAAaF,SAAb,CAA5D;AACD;AAHqC,CAAxC;AAMAG,MAAM,CAACC,OAAP,GAAiBP,iCAAjB","sourcesContent":["/**\n * Copyright (c) 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponentWithPureRenderMixin\n */\n\n'use strict';\n\n/**\n * Performs equality by iterating through keys on an object and returning\n * false when any key has values which are not strictly equal between\n * objA and objB. Returns true when the values of all keys are strictly equal.\n *\n * @return {boolean}\n */\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n  var key;\n  // Test for A's keys different from B.\n  for (key in objA) {\n    if (objA.hasOwnProperty(key) && (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {\n      return false;\n    }\n  }\n  // Test for B's keys missing from A.\n  for (key in objB) {\n    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * If your React component's render function is \"pure\", e.g. it will render the\n * same result given the same props and state, provide this Mixin for a\n * considerable performance boost.\n *\n * Most React components have pure render functions.\n *\n * Example:\n *\n *   var ReactComponentWithPureRenderMixin =\n *     require('ReactComponentWithPureRenderMixin');\n *   React.createClass({\n *     mixins: [ReactComponentWithPureRenderMixin],\n *\n *     render: function() {\n *       return <div className={this.props.className}>foo</div>;\n *     }\n *   });\n *\n * Note: This only checks shallow equality for props and state. If these contain\n * complex data structures this mixin may have false-negatives for deeper\n * differences. Only mixin to components which have simple props and state, or\n * use `forceUpdate()` when you know deep data structures have changed.\n */\nvar ReactComponentWithPureRenderMixin = {\n  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {\n    return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState);\n  }\n};\n\nmodule.exports = ReactComponentWithPureRenderMixin;"]},"metadata":{},"sourceType":"script"}