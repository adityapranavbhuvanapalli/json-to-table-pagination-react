{"ast":null,"code":"/**\n * Copyright (c) 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule FixedDataTableHelper\n * @typechecks\n */\n'use strict';\n\nvar Locale = require('./Locale');\n\nvar React = require('./React');\n\nvar FixedDataTableColumnGroup = require('./FixedDataTableColumnGroup.react');\n\nvar FixedDataTableColumn = require('./FixedDataTableColumn.react');\n\nvar DIR_SIGN = Locale.isRTL() ? -1 : +1; // A cell up to 5px outside of the visible area will still be considered visible\n\nvar CELL_VISIBILITY_TOLERANCE = 5; // used for flyouts\n\nfunction renderToString(value)\n/*string*/\n{\n  if (value === null || value === undefined) {\n    return '';\n  } else {\n    return String(value);\n  }\n}\n/**\n * Helper method to execute a callback against all columns given the children\n * of a table.\n * @param {?object|array} children\n *    Children of a table.\n * @param {function} callback\n *    Function to excecute for each column. It is passed the column.\n */\n\n\nfunction forEachColumn(children, callback) {\n  React.Children.forEach(children, function (child) {\n    if (child.type === FixedDataTableColumnGroup) {\n      forEachColumn(child.props.children, callback);\n    } else if (child.type === FixedDataTableColumn) {\n      callback(child);\n    }\n  });\n}\n/**\n * Helper method to map columns to new columns. This takes into account column\n * groups and will generate a new column group if its columns change.\n * @param {?object|array} children\n *    Children of a table.\n * @param {function} callback\n *    Function to excecute for each column. It is passed the column and should\n *    return a result column.\n */\n\n\nfunction mapColumns(children, callback) {\n  var newChildren = [];\n  React.Children.forEach(children, function (originalChild) {\n    var newChild = originalChild; // The child is either a column group or a column. If it is a column group\n    // we need to iterate over its columns and then potentially generate a\n    // new column group\n\n    if (originalChild.type === FixedDataTableColumnGroup) {\n      var haveColumnsChanged = false;\n      var newColumns = [];\n      forEachColumn(originalChild.props.children, function (originalcolumn) {\n        var newColumn = callback(originalcolumn);\n\n        if (newColumn !== originalcolumn) {\n          haveColumnsChanged = true;\n        }\n\n        newColumns.push(newColumn);\n      }); // If the column groups columns have changed clone the group and supply\n      // new children\n\n      if (haveColumnsChanged) {\n        newChild = React.cloneElement(originalChild, {\n          children: newColumns\n        });\n      }\n    } else if (originalChild.type === FixedDataTableColumn) {\n      newChild = callback(originalChild);\n    }\n\n    newChildren.push(newChild);\n  });\n  return newChildren;\n}\n\nvar FixedDataTableHelper = {\n  DIR_SIGN: DIR_SIGN,\n  CELL_VISIBILITY_TOLERANCE: CELL_VISIBILITY_TOLERANCE,\n  renderToString: renderToString,\n  forEachColumn: forEachColumn,\n  mapColumns: mapColumns\n};\nmodule.exports = FixedDataTableHelper;","map":{"version":3,"sources":["C:/Versa/pagination/node_modules/fixed-data-table/internal/FixedDataTableHelper.js"],"names":["Locale","require","React","FixedDataTableColumnGroup","FixedDataTableColumn","DIR_SIGN","isRTL","CELL_VISIBILITY_TOLERANCE","renderToString","value","undefined","String","forEachColumn","children","callback","Children","forEach","child","type","props","mapColumns","newChildren","originalChild","newChild","haveColumnsChanged","newColumns","originalcolumn","newColumn","push","cloneElement","FixedDataTableHelper","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAYA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIE,yBAAyB,GAAGF,OAAO,CAAC,mCAAD,CAAvC;;AACA,IAAIG,oBAAoB,GAAGH,OAAO,CAAC,8BAAD,CAAlC;;AAEA,IAAII,QAAQ,GAAGL,MAAM,CAACM,KAAP,KAAiB,CAAC,CAAlB,GAAsB,CAAC,CAAtC,C,CACA;;AACA,IAAIC,yBAAyB,GAAG,CAAhC,C,CAAmC;;AAEnC,SAASC,cAAT,CAAwBC,KAAxB;AAA+B;AAAU;AACvC,MAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAAhC,EAA2C;AACzC,WAAO,EAAP;AACD,GAFD,MAEO;AACL,WAAOC,MAAM,CAACF,KAAD,CAAb;AACD;AACF;AAED;;;;;;;;;;AAQA,SAASG,aAAT,CAAuBC,QAAvB,EAAiCC,QAAjC,EAA2C;AACzCZ,EAAAA,KAAK,CAACa,QAAN,CAAeC,OAAf,CAAuBH,QAAvB,EAAiC,UAAUI,KAAV,EAAiB;AAChD,QAAIA,KAAK,CAACC,IAAN,KAAef,yBAAnB,EAA8C;AAC5CS,MAAAA,aAAa,CAACK,KAAK,CAACE,KAAN,CAAYN,QAAb,EAAuBC,QAAvB,CAAb;AACD,KAFD,MAEO,IAAIG,KAAK,CAACC,IAAN,KAAed,oBAAnB,EAAyC;AAC9CU,MAAAA,QAAQ,CAACG,KAAD,CAAR;AACD;AACF,GAND;AAOD;AAED;;;;;;;;;;;AASA,SAASG,UAAT,CAAoBP,QAApB,EAA8BC,QAA9B,EAAwC;AACtC,MAAIO,WAAW,GAAG,EAAlB;AACAnB,EAAAA,KAAK,CAACa,QAAN,CAAeC,OAAf,CAAuBH,QAAvB,EAAiC,UAAUS,aAAV,EAAyB;AACxD,QAAIC,QAAQ,GAAGD,aAAf,CADwD,CAGxD;AACA;AACA;;AACA,QAAIA,aAAa,CAACJ,IAAd,KAAuBf,yBAA3B,EAAsD;AACpD,UAAIqB,kBAAkB,GAAG,KAAzB;AACA,UAAIC,UAAU,GAAG,EAAjB;AAEAb,MAAAA,aAAa,CAACU,aAAa,CAACH,KAAd,CAAoBN,QAArB,EAA+B,UAAUa,cAAV,EAA0B;AACpE,YAAIC,SAAS,GAAGb,QAAQ,CAACY,cAAD,CAAxB;;AACA,YAAIC,SAAS,KAAKD,cAAlB,EAAkC;AAChCF,UAAAA,kBAAkB,GAAG,IAArB;AACD;;AACDC,QAAAA,UAAU,CAACG,IAAX,CAAgBD,SAAhB;AACD,OANY,CAAb,CAJoD,CAYpD;AACA;;AACA,UAAIH,kBAAJ,EAAwB;AACtBD,QAAAA,QAAQ,GAAGrB,KAAK,CAAC2B,YAAN,CAAmBP,aAAnB,EAAkC;AAC3CT,UAAAA,QAAQ,EAAEY;AADiC,SAAlC,CAAX;AAGD;AACF,KAnBD,MAmBO,IAAIH,aAAa,CAACJ,IAAd,KAAuBd,oBAA3B,EAAiD;AACtDmB,MAAAA,QAAQ,GAAGT,QAAQ,CAACQ,aAAD,CAAnB;AACD;;AAEDD,IAAAA,WAAW,CAACO,IAAZ,CAAiBL,QAAjB;AACD,GA9BD;AAgCA,SAAOF,WAAP;AACD;;AAED,IAAIS,oBAAoB,GAAG;AACzBzB,EAAAA,QAAQ,EAAEA,QADe;AAEzBE,EAAAA,yBAAyB,EAAEA,yBAFF;AAGzBC,EAAAA,cAAc,EAAEA,cAHS;AAIzBI,EAAAA,aAAa,EAAEA,aAJU;AAKzBQ,EAAAA,UAAU,EAAEA;AALa,CAA3B;AAQAW,MAAM,CAACC,OAAP,GAAiBF,oBAAjB","sourcesContent":["/**\n * Copyright (c) 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule FixedDataTableHelper\n * @typechecks\n */\n\n'use strict';\n\nvar Locale = require('./Locale');\nvar React = require('./React');\nvar FixedDataTableColumnGroup = require('./FixedDataTableColumnGroup.react');\nvar FixedDataTableColumn = require('./FixedDataTableColumn.react');\n\nvar DIR_SIGN = Locale.isRTL() ? -1 : +1;\n// A cell up to 5px outside of the visible area will still be considered visible\nvar CELL_VISIBILITY_TOLERANCE = 5; // used for flyouts\n\nfunction renderToString(value) /*string*/{\n  if (value === null || value === undefined) {\n    return '';\n  } else {\n    return String(value);\n  }\n}\n\n/**\n * Helper method to execute a callback against all columns given the children\n * of a table.\n * @param {?object|array} children\n *    Children of a table.\n * @param {function} callback\n *    Function to excecute for each column. It is passed the column.\n */\nfunction forEachColumn(children, callback) {\n  React.Children.forEach(children, function (child) {\n    if (child.type === FixedDataTableColumnGroup) {\n      forEachColumn(child.props.children, callback);\n    } else if (child.type === FixedDataTableColumn) {\n      callback(child);\n    }\n  });\n}\n\n/**\n * Helper method to map columns to new columns. This takes into account column\n * groups and will generate a new column group if its columns change.\n * @param {?object|array} children\n *    Children of a table.\n * @param {function} callback\n *    Function to excecute for each column. It is passed the column and should\n *    return a result column.\n */\nfunction mapColumns(children, callback) {\n  var newChildren = [];\n  React.Children.forEach(children, function (originalChild) {\n    var newChild = originalChild;\n\n    // The child is either a column group or a column. If it is a column group\n    // we need to iterate over its columns and then potentially generate a\n    // new column group\n    if (originalChild.type === FixedDataTableColumnGroup) {\n      var haveColumnsChanged = false;\n      var newColumns = [];\n\n      forEachColumn(originalChild.props.children, function (originalcolumn) {\n        var newColumn = callback(originalcolumn);\n        if (newColumn !== originalcolumn) {\n          haveColumnsChanged = true;\n        }\n        newColumns.push(newColumn);\n      });\n\n      // If the column groups columns have changed clone the group and supply\n      // new children\n      if (haveColumnsChanged) {\n        newChild = React.cloneElement(originalChild, {\n          children: newColumns\n        });\n      }\n    } else if (originalChild.type === FixedDataTableColumn) {\n      newChild = callback(originalChild);\n    }\n\n    newChildren.push(newChild);\n  });\n\n  return newChildren;\n}\n\nvar FixedDataTableHelper = {\n  DIR_SIGN: DIR_SIGN,\n  CELL_VISIBILITY_TOLERANCE: CELL_VISIBILITY_TOLERANCE,\n  renderToString: renderToString,\n  forEachColumn: forEachColumn,\n  mapColumns: mapColumns\n};\n\nmodule.exports = FixedDataTableHelper;"]},"metadata":{},"sourceType":"script"}