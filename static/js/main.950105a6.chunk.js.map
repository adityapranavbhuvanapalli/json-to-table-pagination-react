{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handlePageClick","e","selectedPage","selected","offset","state","perPage","setState","id","currentPage","receivedData","sortKey","sortBy","ascSort","data","codeSort","nameSort","citySort","countrySort","bind","axios","get","then","res","sort","a","b","localeCompare","postData","slice","map","item","Fragment","key","code","name","city","country","pageCount","Math","ceil","length","this","align","cellPadding","cellSpacing","border","onClick","onPageChange","containerClassName","subContainerClassName","activeClassName","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.950105a6.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport axios from 'axios'\r\nimport ReactPaginate from 'react-paginate';\r\nimport './App.css'\r\n\r\nexport default class App extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id : 0,\r\n            offset: 0,\r\n            data: [],\r\n            perPage: 13,\r\n            currentPage: 0,\r\n            sortKey : \"code\",\r\n            ascSort : 1,\r\n            codeSort : \"(ASC)\",\r\n            nameSort : \"\",\r\n            citySort : \"\",\r\n            countrySort : \"\"\r\n\r\n        };\r\n        this.handlePageClick = this\r\n            .handlePageClick\r\n            .bind(this);\r\n    }\r\n    \r\n    receivedData(sortKey) {\r\n        axios.get(\"https://gist.githubusercontent.com/tdreyno/4278655/raw/7b0762c09b519f40397e4c3e100b097d861f5588/airports.json\")\r\n            .then(res => {\r\n              const data = res.data;\r\n              if(this.state.ascSort===1){ \r\n                data.sort((a,b) => a[sortKey].localeCompare(b[sortKey])) \r\n              }\r\n              else{ \r\n                data.sort((b,a) => a[sortKey].localeCompare(b[sortKey]))\r\n              }\r\n              const slice = data.slice(this.state.offset, this.state.offset + this.state.perPage)\r\n              const postData = slice.map(item => <React.Fragment>\r\n                  <tr key={item.code}>\r\n                    <td>{++this.state.id}</td>\r\n                    <td>{item.code?item.code:\"###\"}</td>\r\n                    <td>{item.name?item.name:\"### airport\"}</td>\r\n                    <td>{item.city?item.city:\"### city\"}</td>\r\n                    <td>{item.country?item.country:\"### country\"}</td>\r\n                  </tr>\r\n                </React.Fragment>)\r\n\r\n              this.setState({\r\n                  id: this.state.offset,\r\n                  pageCount: Math.ceil(data.length / this.state.perPage),                  \r\n                  data : res.data,\r\n                  sortKey : sortKey,\r\n                  codeSort : (sortKey===\"code\")?(this.state.ascSort?\"(ASC)\":\"(DESC)\"):\"\",\r\n                  nameSort : (sortKey===\"name\")?(this.state.ascSort?\"(ASC)\":\"(DESC)\"):\"\",\r\n                  citySort : (sortKey===\"city\")?(this.state.ascSort?\"(ASC)\":\"(DESC)\"):\"\",\r\n                  countrySort : (sortKey===\"country\")?(this.state.ascSort?\"(ASC)\":\"(DESC)\"):\"\",\r\n                  postData\r\n              })              \r\n            })\r\n    }\r\n\r\n    handlePageClick = (e) => {\r\n        const selectedPage = e.selected;\r\n        const offset = selectedPage * this.state.perPage;\r\n\r\n        this.setState({\r\n            id: offset,\r\n            currentPage: selectedPage,\r\n            offset: offset\r\n        }, () => {\r\n            this.receivedData(this.state.sortKey)\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.receivedData(this.state.sortKey);\r\n    }\r\n\r\n    sortBy = (e) => {\r\n      this.receivedData(e);\r\n      \r\n      this.setState({ \r\n        ascSort : (e===this.state.sortKey)?(this.state.ascSort?0:1):1\r\n      });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div align=\"center\">\r\n              <h2>JSON into Table With Pagination and Sort</h2>\r\n              <table align=\"center\" cellPadding='6' cellSpacing='0' border=\"1\">\r\n                <thead> \r\n                  <tr>\r\n                    <td>Sl.No </td>\r\n                    <td onClick={() => this.sortBy('code')}>Code {this.state.codeSort}</td>\r\n                    <td onClick={() => this.sortBy('name')}>Name {this.state.nameSort}</td>\r\n                    <td onClick={() => this.sortBy('city')}>City {this.state.citySort}</td>\r\n                    <td onClick={() => this.sortBy('country')}>Country {this.state.countrySort}</td>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {this.state.postData}\r\n                  <ReactPaginate\r\n                      // previousLabel={\"<-\"}\r\n                      // nextLabel={\"->\"}\r\n                      // breakLabel={\"...\"}\r\n                      // breakClassName={\"break-me\"}\r\n                      pageCount={this.state.pageCount}\r\n                      // marginPagesDisplayed={2}\r\n                      // pageRangeDisplayed={5}\r\n                      onPageChange={this.handlePageClick}\r\n                      containerClassName={\"pagination\"}\r\n                      subContainerClassName={\"pages pagination\"}\r\n                      activeClassName={\"active\"}\r\n                  />\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}